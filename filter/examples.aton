


@ TRANSPOSITION @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



@@BEGIN: EXAMPLE
@CATEGORY:	transposition
@FILTER:	transpose -k d
@FILE:		mozart/sonatas/sonata01-1.krn
@COMPILE:
@DESCRIPTION:
	Transpose music to the key of D (major or minor depending
	on the starting mode).  A key designation must be present in
	the file to use the -k option, such as *C: for C major.  A
	transposition interval will be calculated from the old key
	to the new key, moving in the direction of the nearest tonic.
	For example when transposing from C major to G major, the music
	will be transposed down a fourth instead of up a fifth.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	transposition
@FILTER:	transpose -k e-
@FILE:		mozart/sonatas/sonata01-1.krn
@COMPILE:
@DESCRIPTION:
	Transpose music to the key of E-flat.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	transposition
@FILTER:	transpose -k f#
@FILE:		mozart/sonatas/sonata01-1.krn
@COMPILE:
@DESCRIPTION:
	Transpose music to the key of f-sharp.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	transposition
@FILTER:	transpose -t m6
@FILE:		mozart/sonatas/sonata01-1.krn
@COMPILE:
@DESCRIPTION:
	Transpose music using a diatonic interval with chromatic
	inflection. In this case "m6" means up a minor sixth.  "M" means
	major, "P" perfect, "d" diminished, and "A" augmented.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	transposition
@FILTER:	transpose -t -M3
@FILE:		mozart/sonatas/sonata01-1.krn
@COMPILE:
@DESCRIPTION:
	Transpose music down a major third.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	transposition
@FILTER:	transpose -b 11
@FILE:		mozart/sonatas/sonata01-1.krn
@COMPILE:
@DESCRIPTION:
	Transpose music using a base-40 interval.  Major seconds are "5"
	and minor seconds are "6", so a minor third is 5+6 = 11.  Other
	common intervals are the perfect fifth (23) and the octave (40).
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	transposition
@FILTER:	transpose -b -23
@FILE:		mozart/sonatas/sonata01-1.krn
@COMPILE:
@DESCRIPTION:
	Transpose music down a perfect fifth, described as a base-40 interval.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	transposition
@FILTER:	transpose -s 1 -t -d5
@FILE:		mozart/sonatas/sonata01-1.krn
@COMPILE:
@DESCRIPTION:
	Transpose only the first spine down a diminished fifth.  The rest
	of the spines in the data will not be transposed.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	transposition
@FILTER:	transpose -s 1,3 -t M2
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Transpose the first and third spines up a major second.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	transposition
@FILTER:	transpose -s 2-$ -t P4
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Transpose all spines up a perfect fourth except for the first spine.
@@END: EXAMPLE



@ MUSICAL EXCERPTS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



@@BEGIN: EXAMPLE
@CATEGORY:	excerpt
@FILTER:	myank -m 1-4
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the first four measures of the score.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	excerpt
@FILTER:	myank -m 4-1
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the first four measures of the score in reverse
	sequence.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	excerpt
@FILTER:	myank -d -m 1-4,9-12
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the first four measures of the score, and the ninth
	through twelfth measures as well.  Do not add spaces in the
	measure list, but you can if you place the list in quotes.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	excerpt
@FILTER:	myank -m 1,1,1,1
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the first measures four times.
@@END: EXAMPLE



@ PART EXTRACTION @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



@@BEGIN: EXAMPLE
@CATEGORY:	extract
@FILTER:	extract -s 1
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the first spine from a full score.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	extract
@FILTER:	extract -s 1 | rid -d
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the first spine from a full score, and then remove
	lines of data that only contain null data tokens (.).  This
	is sometimes necessary for proper display of an extracted
	part.  Press the compile button in the VHV link for this
	example and notice that the null token (period character)
	on line 25 is removed if the rid filter is applied after
	extracting the part.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	extract
@FILTER:	extract -s 1,3
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the first and third spine from a full score.  Do
	not put spaces in the spine string, unless you enclose them
	in quotes.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	extract
@FILTER:	extract -s 1,$
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the first and last spines in the score.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	extract
@FILTER:	extract -s 2-$
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract all spines except the first.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	extract
@FILTER:	extract -s 4-1
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the spines from 4 to 1 in reverse order.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	extract
@FILTER:	extract -i kern
@FILE:		mozart/sonatas/sonata01-1.krn
@COMPILE:
@DESCRIPTION:
	Extract all **kern spines, removing any non-kern spines,
	such as **dynam (dynamics) in this example.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	extract
@FILTER:	extract -k 1
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the first kern spine.  This is similar to "-s 1",
	but the kern spines are numbered sequentially, skipping
	over non kern spines.  In effect, this is equivalent to
	extracting by staff number, with the bottom staff being
	k=1.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	extract
@FILTER:	extract -k 3-$
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Extract the third kern spine and all other kern spines after
	it.  This is the third spine from the bottom of the system
	and all staves higher than it.
@@END: EXAMPLE


@ PIPELINES @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



@@BEGIN: EXAMPLE
@CATEGORY:	pipeline
@FILTER:	myank -m 1-2 | transpose -t M3
@FILE:		mozart/sonatas/sonata01-1.krn
@COMPILE:
@DESCRIPTION:
	Extract the first two measures and then transpose them up
	a major third.
@@END: EXAMPLE



@ CHORD @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



@@BEGIN: EXAMPLE
@CATEGORY:	chord
@FILTER:	chord -b -s 1 | chord -t -s 2
@FILE:		mozart/sonatas/sonata02-1.krn
@COMPILE:
@DESCRIPTION:
	Extract the top note on in the first spine (bottom staff),
	and the top note in the second spine (top staff).
@@END: EXAMPLE



@ SEARCH @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



@@BEGIN: EXAMPLE
@CATEGORY:	search
@FILTER:	msearch -p gefg
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Search for the melodic pitch sequence G, E, F, then G.  This
	searches for diatonic pitches with any chromatic alteration
	allowed, so in the search results for this example, the
	actual pitch sequence found is G-natural, E-natural, F-sharp,
	then G-natural.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	search
@FILTER:	msearch -p gefg | msearch -p dbag -m + --color limegreen
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Two separate patterns can be searched for independently in
	sequence.  The first search will color matched notes red
	by default, so the second search colors its matches green
	so the two searches can be distinguished.  In addition,
	each search will mark notes in the score with a character.
	The default mark character is "@", but the letters "ijNZV+|"
	can also be used (as well as "k" in certain cases).  These
	letters may be used for other purposes in the score, so
	check for "!!!RDF**kern:" lines in the score (typically at
	the bottom of the data) to see what character may already
	be in use.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	search
@FILTER:	msearch -p gefg | msearch -p dbag -m + --color limegreen | satb2gs
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Do two separate searches, and then convert the layout for
	the four-part chorale to grand staff display.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	search
@FILTER:	msearch -i 2 
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Search for all stepwise rising motion.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	search
@FILTER:	msearch -i 2  -r 88
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Search for all stepwise rising motion on eighth notes. (needs fixing)
@@END: EXAMPLE



@ COUNTERPOINT @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@@BEGIN: EXAMPLE
@CATEGORY:	counterpoint
@FILTER:	extract -s 3,4 | cint | shed -e 's/cint/cdata/X' 
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Display counterpoint modules for the soprano and alto parts
	of the chorale.  You will need to type alt-w several times to
	prevent the text from overlapping.  Each module consists of 
	three numbers: the first one is the harmonic interval of the
	first two notes of the each module.  The second number is the
	melodic interval of the bass part, and the third number is the
	harmonic interval of the last two notes of the module.  For example
	the first module is "4 1 4", which means that there is a 
	harmonic interval of a fourth, then the bottom note repeats
	and another harmonic fourth is sounded at the end of the module.
	Note that the fourth interval of the module, the melodic interval
	in the soprano part, can be calculated from the other three
	intervals, and in this case is a unison.  The shed filter is used
	in this example to conver the **cint analysis into **cdata, since
	cdata spines will be converted into visible text in the notation.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	counterpoint
@FILTER:	cint  -xU  -o  --search "3xx .* 3xx"
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Highlight all parallel thirds where the notes attack together.
	The -x option add attach state markers to each interval,
	the -U option prevents including repeated thirds from
	matching.  The search "3xx .* 3xx" is a regular expression,
	where .* means any melodic motion (other than unisons which
	are excluded by the -U option). The -o option makes parallel
	tenths count as thirds.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	counterpoint
@FILTER:	cint  -Uox  --search "5(sx|xs) .* 5"
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Find "soft" parallel fifths, where the first two notes of the 
	parallel motion do not attack at the same time.
@@END: EXAMPLE



@ Regular Expression @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


@@BEGIN: EXAMPLE
@CATEGORY:	regular_expressions
@FILTER:	shed -ke "s/([A-G]+)[n#-]+[XY]?/$1/gi"
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Remove all accidentals (converting all notes to natural).
	For the example piece which is in G major, this will create
	music in G mixolydian.  The -k option is used to only alter
	content in **kern spines.  The $1 variable in the replacement
	string will be substituted with text in parentheses in the
	search string.  The regular expression syntax used in filters
	is the PERL-like form.  The "[XY]?" expression is not necessary
	for this example data, but in general it is useful to include
	the X qualifier for accidentals which forces them to display,
	and the y qulalifier which forces them to be hidden.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	regular_expressions
@FILTER:	shed -ke "s/[A-G]+[n#-]*[XY]?/c/gi"
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Convert all notes to middle C.  <a target="_blank"
	href="https://www.youtube.com/watch?v=yNi0bukYRnA">Terry
	Riley</a> would love this filter.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	regular_expressions
@FILTER:	shed -ke "s/[A-G]+[n#-]*[XY]?/c/gi" | transpose -s 1 -b -80 | transpose -s 2 -t -P4 | transpose -s 4 -b 52 | shed -e "s/k\[.*\]/k[]/I"
@FILE:		chorales/chor001.krn
@COMPILE:
@DESCRIPTION:
	Convert all notes to middle C.  And then transpose each part to
	a different note to create repeated C major chords.  The final shed command
	converts all of the key signatures to no sharps/flats.
@@END: EXAMPLE



@@BEGIN: EXAMPLE
@CATEGORY:	regular_expressions
@FILTER:	shed -ke "s/ .*//"
@FILE:		mozart/sonatas/sonata02-1.krn
@COMPILE:
@DESCRIPTION:
	Similar to the filter "chord -f" filter, which remove all notes after the
	first one in a chord token.  The first note can be any pitch in the chord,
	so this is not the same as "chord -t" which would extract only the top note.
	However, "chord -t" is equivalent to "chord -d | shed -ke 's/ .*//'".
@@END: EXAMPLE





